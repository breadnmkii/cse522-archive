#include <unistd.h>
#include <sys/types.h>
#include <sched.h>
#include <stdio.h>
#include <sys/mman.h>
#include <sys/mount.h>
#include <sys/param.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/stat.h>
#include <stddef.h>
#include <stdint.h>
#include <stdlib.h>
#include <sys/un.h>
#include <sys/wait.h>
#include <errno.h>
#include <fcntl.h>
#include <limits.h>
#define PAGE_SIZE (1UL << 12)

static const char * long_path;
static char name_buff[NAME_MAX + 1];


typedef struct {
    pid_t pid;
    int socks[2];
    size_t count;
    int delete;
} t_userns;

static void send_then_wait(const int sock, const char * const send_state, const char wait_state);
static void update_id_map(char * const mapping, const char * const map_file);
static void proc_setgroups_write(const pid_t child_pid, const char * const str);
static void clean_up(t_userns * const userns);

static void
send_then_wait(const int sock, const char * const send_state, const char wait_state)
{
    if (send_state && send(sock, send_state, 1, MSG_NOSIGNAL) != 1) {
        return;
    }
    if (wait_state) {
        char state = 0;
        if (read(sock, &state, 1) != 1) 
            return;
        if (state != wait_state) 
            return;
    }
}

static void
update_id_map(char * const mapping, const char * const map_file)
{
    const size_t map_len = strlen(mapping);
    if (map_len >= SSIZE_MAX) return;
    if (map_len <= 0) return;

    size_t i;
    for (i = 0; i < map_len; i++) {
        if (mapping[i] == ',')
            mapping[i] = '\n';
    }

    const int fd = open(map_file, O_WRONLY);
    if (fd <= -1) return;
    if (write(fd, mapping, map_len) != (ssize_t)map_len) return;
    if (close(fd)) return;
}

static void
proc_setgroups_write(const pid_t child_pid, const char * const str)
{
    const size_t str_len = strlen(str);
    if (str_len >= SSIZE_MAX) return;
    if (str_len <= 0) return;

    char setgroups_path[64];
    snprintf(setgroups_path, sizeof(setgroups_path), "/proc/%ld/setgroups", (long)child_pid);

    const int fd = open(setgroups_path, O_WRONLY);
    if (fd <= -1) {
        if (fd != -1) return;
        if (errno != ENOENT) return;
        return;
    }
    if (write(fd, str, str_len) != (ssize_t)str_len) return;
    if (close(fd)) return;
}

static void
clean_up(t_userns * const userns)
{
    if (!userns) return;
    if (kill(userns->pid, SIGKILL)) return;

    int status = 0;
    if (waitpid(userns->pid, &status, 0) != userns->pid) return;
    userns->pid = -1;
    if (!WIFSIGNALED(status)) return;
    if (WTERMSIG(status) != SIGKILL)
        return;

    if (close(*userns->socks)) return;
    *userns->socks = -1;
}