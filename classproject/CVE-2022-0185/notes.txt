=== Bug Context ===
The bug affects all Linux versions up to 5.1. The primary reason why this bug 
is so interesting is because of how simple yet devestating it can be, as any 
unprivileged user can potentially leverage the use of user namespaces and a 
simple script to crash any vulnerable kernel.

The primary issue is that the Linux filesystem context API has a set of 
operations that can be used to modify/manage 'fs_context' structs that
has several parameters describing a mounted filesystem.

In order to support the parsing of parameters for legacy filesystems
(which include common Linux filesystems like ext4 and Plan 9), the passing
of parameters to the 'parse_parami()' operation will eventually fall through
to call a vulnerable 'legacy_parse_param()' function that has an erroneous
'unsigned int' bounds check.


=== Vulnerability Description ===
This bug is triggered by causing an overflow with a character string of
33 A's. The vulnerable function within the 'fs_context.c' file is the 
'legacy_parse_param()' function.

Due to a vulnerable length check of the parameter length and the use of an,
unsigned integer "size", the check can potentially overflow.

This is acheived by observing that passing a value greater than 4095 bytes
to the unsuspecting unsigned int parameter will result in an underflow,
allowing the oversize check to pass for a value much greater than the
integer supports.


=== How to Run Exploit ===
1. Log in to a non-root user (e.g. testuser@bread-n-pii)
2. Compile the bug_program.c 
3. Start a new user namespace mapped to root in the namespace to gain
   CAP_SYS_ADMIN capabilities within the namespace.
   (i.e. 'unshare -Urm')
4. Execute the compiled program with user namespace sudo privileges..
5. Observe system crash


=== Patching Exploit ===
Must modify the offending 'fs_context.c' file, located at source linux
path '/fs/fs_context.c'.

Apply the following patch:
@@ -548,7 +548,7 @@
-       if (len > PAGE_SIZE - 2 - size)
+       if (size + len + 2 > PAGE_SIZE)
                return invalf(fc, "VFS: Legacy: Cumulative options too large");

Then recompile the source code to generate a secured kernel.
